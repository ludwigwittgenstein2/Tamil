{
  "hash": "d3aee48769168a4fad9ddece540594f6",
  "result": {
    "markdown": "---\ntitle: 'Penguins, meet Quarto!'\nformat: html\neditor: visual\n---\n\n```{r}\n#| label: load-packages\n#| include: false\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n\n\n## Meet Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n## Meet the penguins\n\n![](https://raw.githubusercontent.com/quarto-dev/quarto-web/main/docs/get-started/hello/rstudio/lter_penguins.png){style=\"float:right;\" fig-alt=\"Illustration of three species of Palmer Archipelago penguins: Chinstrap, Gentoo, and Adelie. Artwork by @allison_horst.\" width=\"401\"}\n\nThe `penguins` data from the [**palmerpenguins**](https://allisonhorst.github.io/palmerpenguins \"palmerpenguins R package\") package contains size measurements for `r nrow(penguins)` penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.\n\nThe plot below shows the relationship between flipper and bill lengths of these penguins.\n\n\n```{r}\n#| label: plot-penguins\n#| warning: false\n#| echo: false\n\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n    color = \"Penguin species\", shape = \"Penguin species\"\n  ) +\n  theme_minimal()\n```\n\n\n\n## NumPy\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n## Matplotlib\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n## Plotly\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n\n\n# One Hot Vector - Tutorial\n>by Rick Rejeleene\n\n- toc: true \n- badges: true\n- comments: true\n- categories: [jupyter]\n- image: images/chart-preview.png\n\nWe are converting categorical variables into binary Vectors\n\n##Import Libraries\nimport numpy as np\n## Categorical Variable\nsentence = \"\"\"Thomas Jefferson began building Monticello at the\n...   age of 26.\"\"\"\n##Convert to Tokens\ntoken_sequence = str.split(sentence)\nvocab = sorted(set(token_sequence))\n', '.join(vocab)\nvocab_size = len(vocab)\nnum_tokens = len(token_sequence)\n##Convert to One Hot Vectors\nonehot_vectors = np.zeros((num_tokens, vocab_size), int)\nfor i, word in enumerate(token_sequence):\n  onehot_vectors[i, vocab.index(word)] = 1\nonehot_vectors\n  import pandas as pd\n## Output Dataframe\npd.DataFrame(onehot_vectors, columns=vocab)\n#Sources: \n\nJason's Machine Learning Blog\n\nhttps://machinelearningmastery.com/how-to-one-hot-encode-sequence-data-in-python/\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}